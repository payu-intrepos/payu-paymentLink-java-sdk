/*
 * Hub Token
 * Generate Token
 *
 * The version of the OpenAPI document: v1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.PaymentLinkRequestDTO;
import org.openapitools.client.model.ResultDTO;
import org.openapitools.client.model.StatusOrExpiryDTO;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PaymentLinkApi {
    private ApiClient localVarApiClient;

    public PaymentLinkApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PaymentLinkApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for changeStatusOrExpiry
     * @param id  (required)
     * @param mid merchant identifier (required)
     * @param statusOrExpiryDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> something went wrong </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Changed successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeStatusOrExpiryCall(String id, String mid, StatusOrExpiryDTO statusOrExpiryDTO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = statusOrExpiryDTO;

        // create path and map variables
        String localVarPath = "/payment-links/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mid != null) {
            localVarHeaderParams.put("mid", localVarApiClient.parameterToString(mid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call changeStatusOrExpiryValidateBeforeCall(String id, String mid, StatusOrExpiryDTO statusOrExpiryDTO, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling changeStatusOrExpiry(Async)");
        }
        
        // verify the required parameter 'mid' is set
        if (mid == null) {
            throw new ApiException("Missing the required parameter 'mid' when calling changeStatusOrExpiry(Async)");
        }
        
        // verify the required parameter 'statusOrExpiryDTO' is set
        if (statusOrExpiryDTO == null) {
            throw new ApiException("Missing the required parameter 'statusOrExpiryDTO' when calling changeStatusOrExpiry(Async)");
        }
        

        okhttp3.Call localVarCall = changeStatusOrExpiryCall(id, mid, statusOrExpiryDTO, _callback);
        return localVarCall;

    }

    /**
     * change status and expiry for paymentLink 
     * 
     * @param id  (required)
     * @param mid merchant identifier (required)
     * @param statusOrExpiryDTO  (required)
     * @return ResultDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> something went wrong </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Changed successfully </td><td>  -  </td></tr>
     </table>
     */
    public ResultDTO changeStatusOrExpiry(String id, String mid, StatusOrExpiryDTO statusOrExpiryDTO) throws ApiException {
        ApiResponse<ResultDTO> localVarResp = changeStatusOrExpiryWithHttpInfo(id, mid, statusOrExpiryDTO);
        return localVarResp.getData();
    }

    /**
     * change status and expiry for paymentLink 
     * 
     * @param id  (required)
     * @param mid merchant identifier (required)
     * @param statusOrExpiryDTO  (required)
     * @return ApiResponse&lt;ResultDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> something went wrong </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Changed successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultDTO> changeStatusOrExpiryWithHttpInfo(String id, String mid, StatusOrExpiryDTO statusOrExpiryDTO) throws ApiException {
        okhttp3.Call localVarCall = changeStatusOrExpiryValidateBeforeCall(id, mid, statusOrExpiryDTO, null);
        Type localVarReturnType = new TypeToken<ResultDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * change status and expiry for paymentLink  (asynchronously)
     * 
     * @param id  (required)
     * @param mid merchant identifier (required)
     * @param statusOrExpiryDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> something went wrong </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Changed successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call changeStatusOrExpiryAsync(String id, String mid, StatusOrExpiryDTO statusOrExpiryDTO, final ApiCallback<ResultDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = changeStatusOrExpiryValidateBeforeCall(id, mid, statusOrExpiryDTO, _callback);
        Type localVarReturnType = new TypeToken<ResultDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPaymentLink
     * @param mid merchant identifier (required)
     * @param paymentLinkRequestDTO  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Link Created successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentLinkCall(String mid, PaymentLinkRequestDTO paymentLinkRequestDTO, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = paymentLinkRequestDTO;

        // create path and map variables
        String localVarPath = "/payment-links";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mid != null) {
            localVarHeaderParams.put("mid", localVarApiClient.parameterToString(mid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPaymentLinkValidateBeforeCall(String mid, PaymentLinkRequestDTO paymentLinkRequestDTO, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mid' is set
        if (mid == null) {
            throw new ApiException("Missing the required parameter 'mid' when calling createPaymentLink(Async)");
        }
        
        // verify the required parameter 'paymentLinkRequestDTO' is set
        if (paymentLinkRequestDTO == null) {
            throw new ApiException("Missing the required parameter 'paymentLinkRequestDTO' when calling createPaymentLink(Async)");
        }
        

        okhttp3.Call localVarCall = createPaymentLinkCall(mid, paymentLinkRequestDTO, _callback);
        return localVarCall;

    }

    /**
     * Create PaymentLinks
     * create single payment link
     * @param mid merchant identifier (required)
     * @param paymentLinkRequestDTO  (required)
     * @return ResultDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Link Created successfully </td><td>  -  </td></tr>
     </table>
     */
    public ResultDTO createPaymentLink(String mid, PaymentLinkRequestDTO paymentLinkRequestDTO) throws ApiException {
        ApiResponse<ResultDTO> localVarResp = createPaymentLinkWithHttpInfo(mid, paymentLinkRequestDTO);
        return localVarResp.getData();
    }

    /**
     * Create PaymentLinks
     * create single payment link
     * @param mid merchant identifier (required)
     * @param paymentLinkRequestDTO  (required)
     * @return ApiResponse&lt;ResultDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Link Created successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultDTO> createPaymentLinkWithHttpInfo(String mid, PaymentLinkRequestDTO paymentLinkRequestDTO) throws ApiException {
        okhttp3.Call localVarCall = createPaymentLinkValidateBeforeCall(mid, paymentLinkRequestDTO, null);
        Type localVarReturnType = new TypeToken<ResultDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create PaymentLinks (asynchronously)
     * create single payment link
     * @param mid merchant identifier (required)
     * @param paymentLinkRequestDTO  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Link Created successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPaymentLinkAsync(String mid, PaymentLinkRequestDTO paymentLinkRequestDTO, final ApiCallback<ResultDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPaymentLinkValidateBeforeCall(mid, paymentLinkRequestDTO, _callback);
        Type localVarReturnType = new TypeToken<ResultDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAllPaymentLink
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param mid merchant identifier (required)
     * @param pageOffset  (optional, default to 0)
     * @param pageSize  (optional, default to 20)
     * @param orderBy  (optional, default to addedOn)
     * @param order  (optional, default to asc)
     * @param searchText  (optional)
     * @param status  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Something went wrong </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Details fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPaymentLinkCall(String dateFrom, String dateTo, String mid, Integer pageOffset, Integer pageSize, String orderBy, String order, String searchText, List<String> status, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment-links";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageOffset", pageOffset));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateFrom", dateFrom));
        }

        if (searchText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchText", searchText));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTo", dateTo));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status", status));
        }

        if (mid != null) {
            localVarHeaderParams.put("mid", localVarApiClient.parameterToString(mid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPaymentLinkValidateBeforeCall(String dateFrom, String dateTo, String mid, Integer pageOffset, Integer pageSize, String orderBy, String order, String searchText, List<String> status, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling getAllPaymentLink(Async)");
        }
        
        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling getAllPaymentLink(Async)");
        }
        
        // verify the required parameter 'mid' is set
        if (mid == null) {
            throw new ApiException("Missing the required parameter 'mid' when calling getAllPaymentLink(Async)");
        }
        

        okhttp3.Call localVarCall = getAllPaymentLinkCall(dateFrom, dateTo, mid, pageOffset, pageSize, orderBy, order, searchText, status, _callback);
        return localVarCall;

    }

    /**
     * Get all PaymentLinks
     * 
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param mid merchant identifier (required)
     * @param pageOffset  (optional, default to 0)
     * @param pageSize  (optional, default to 20)
     * @param orderBy  (optional, default to addedOn)
     * @param order  (optional, default to asc)
     * @param searchText  (optional)
     * @param status  (optional)
     * @return ResultDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Something went wrong </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Details fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public ResultDTO getAllPaymentLink(String dateFrom, String dateTo, String mid, Integer pageOffset, Integer pageSize, String orderBy, String order, String searchText, List<String> status) throws ApiException {
        ApiResponse<ResultDTO> localVarResp = getAllPaymentLinkWithHttpInfo(dateFrom, dateTo, mid, pageOffset, pageSize, orderBy, order, searchText, status);
        return localVarResp.getData();
    }

    /**
     * Get all PaymentLinks
     * 
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param mid merchant identifier (required)
     * @param pageOffset  (optional, default to 0)
     * @param pageSize  (optional, default to 20)
     * @param orderBy  (optional, default to addedOn)
     * @param order  (optional, default to asc)
     * @param searchText  (optional)
     * @param status  (optional)
     * @return ApiResponse&lt;ResultDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Something went wrong </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Details fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultDTO> getAllPaymentLinkWithHttpInfo(String dateFrom, String dateTo, String mid, Integer pageOffset, Integer pageSize, String orderBy, String order, String searchText, List<String> status) throws ApiException {
        okhttp3.Call localVarCall = getAllPaymentLinkValidateBeforeCall(dateFrom, dateTo, mid, pageOffset, pageSize, orderBy, order, searchText, status, null);
        Type localVarReturnType = new TypeToken<ResultDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all PaymentLinks (asynchronously)
     * 
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param mid merchant identifier (required)
     * @param pageOffset  (optional, default to 0)
     * @param pageSize  (optional, default to 20)
     * @param orderBy  (optional, default to addedOn)
     * @param order  (optional, default to asc)
     * @param searchText  (optional)
     * @param status  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Something went wrong </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Details fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAllPaymentLinkAsync(String dateFrom, String dateTo, String mid, Integer pageOffset, Integer pageSize, String orderBy, String order, String searchText, List<String> status, final ApiCallback<ResultDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPaymentLinkValidateBeforeCall(dateFrom, dateTo, mid, pageOffset, pageSize, orderBy, order, searchText, status, _callback);
        Type localVarReturnType = new TypeToken<ResultDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMerchantCustomAttributes
     * @param mid merchant identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Details fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantCustomAttributesCall(String mid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment-links/default-merchant-attributes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mid != null) {
            localVarHeaderParams.put("mid", localVarApiClient.parameterToString(mid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMerchantCustomAttributesValidateBeforeCall(String mid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mid' is set
        if (mid == null) {
            throw new ApiException("Missing the required parameter 'mid' when calling getMerchantCustomAttributes(Async)");
        }
        

        okhttp3.Call localVarCall = getMerchantCustomAttributesCall(mid, _callback);
        return localVarCall;

    }

    /**
     * Get Custom Attributes
     * 
     * @param mid merchant identifier (required)
     * @return ResultDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Details fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public ResultDTO getMerchantCustomAttributes(String mid) throws ApiException {
        ApiResponse<ResultDTO> localVarResp = getMerchantCustomAttributesWithHttpInfo(mid);
        return localVarResp.getData();
    }

    /**
     * Get Custom Attributes
     * 
     * @param mid merchant identifier (required)
     * @return ApiResponse&lt;ResultDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Details fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultDTO> getMerchantCustomAttributesWithHttpInfo(String mid) throws ApiException {
        okhttp3.Call localVarCall = getMerchantCustomAttributesValidateBeforeCall(mid, null);
        Type localVarReturnType = new TypeToken<ResultDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Custom Attributes (asynchronously)
     * 
     * @param mid merchant identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Details fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMerchantCustomAttributesAsync(String mid, final ApiCallback<ResultDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMerchantCustomAttributesValidateBeforeCall(mid, _callback);
        Type localVarReturnType = new TypeToken<ResultDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPaymentLinkTransactions
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param id  (required)
     * @param mid merchant identifier (required)
     * @param pageOffset  (optional, default to 0)
     * @param pageSize  (optional, default to 20)
     * @param orderBy  (optional, default to addedOn)
     * @param order  (optional, default to asc)
     * @param searchText  (optional)
     * @param searchTerm  (optional)
     * @param status  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Details fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentLinkTransactionsCall(String dateFrom, String dateTo, String id, String mid, Integer pageOffset, Integer pageSize, String orderBy, String order, String searchText, String searchTerm, List<String> status, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment-links/{id}/txns"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageOffset", pageOffset));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (order != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order", order));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateFrom", dateFrom));
        }

        if (searchText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchText", searchText));
        }

        if (searchTerm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchTerm", searchTerm));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTo", dateTo));
        }

        if (status != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "status", status));
        }

        if (mid != null) {
            localVarHeaderParams.put("mid", localVarApiClient.parameterToString(mid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPaymentLinkTransactionsValidateBeforeCall(String dateFrom, String dateTo, String id, String mid, Integer pageOffset, Integer pageSize, String orderBy, String order, String searchText, String searchTerm, List<String> status, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling getPaymentLinkTransactions(Async)");
        }
        
        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling getPaymentLinkTransactions(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getPaymentLinkTransactions(Async)");
        }
        
        // verify the required parameter 'mid' is set
        if (mid == null) {
            throw new ApiException("Missing the required parameter 'mid' when calling getPaymentLinkTransactions(Async)");
        }
        

        okhttp3.Call localVarCall = getPaymentLinkTransactionsCall(dateFrom, dateTo, id, mid, pageOffset, pageSize, orderBy, order, searchText, searchTerm, status, _callback);
        return localVarCall;

    }

    /**
     * Get Transaction details
     * 
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param id  (required)
     * @param mid merchant identifier (required)
     * @param pageOffset  (optional, default to 0)
     * @param pageSize  (optional, default to 20)
     * @param orderBy  (optional, default to addedOn)
     * @param order  (optional, default to asc)
     * @param searchText  (optional)
     * @param searchTerm  (optional)
     * @param status  (optional)
     * @return ResultDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Details fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public ResultDTO getPaymentLinkTransactions(String dateFrom, String dateTo, String id, String mid, Integer pageOffset, Integer pageSize, String orderBy, String order, String searchText, String searchTerm, List<String> status) throws ApiException {
        ApiResponse<ResultDTO> localVarResp = getPaymentLinkTransactionsWithHttpInfo(dateFrom, dateTo, id, mid, pageOffset, pageSize, orderBy, order, searchText, searchTerm, status);
        return localVarResp.getData();
    }

    /**
     * Get Transaction details
     * 
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param id  (required)
     * @param mid merchant identifier (required)
     * @param pageOffset  (optional, default to 0)
     * @param pageSize  (optional, default to 20)
     * @param orderBy  (optional, default to addedOn)
     * @param order  (optional, default to asc)
     * @param searchText  (optional)
     * @param searchTerm  (optional)
     * @param status  (optional)
     * @return ApiResponse&lt;ResultDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Details fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultDTO> getPaymentLinkTransactionsWithHttpInfo(String dateFrom, String dateTo, String id, String mid, Integer pageOffset, Integer pageSize, String orderBy, String order, String searchText, String searchTerm, List<String> status) throws ApiException {
        okhttp3.Call localVarCall = getPaymentLinkTransactionsValidateBeforeCall(dateFrom, dateTo, id, mid, pageOffset, pageSize, orderBy, order, searchText, searchTerm, status, null);
        Type localVarReturnType = new TypeToken<ResultDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Transaction details (asynchronously)
     * 
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param id  (required)
     * @param mid merchant identifier (required)
     * @param pageOffset  (optional, default to 0)
     * @param pageSize  (optional, default to 20)
     * @param orderBy  (optional, default to addedOn)
     * @param order  (optional, default to asc)
     * @param searchText  (optional)
     * @param searchTerm  (optional)
     * @param status  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Details fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPaymentLinkTransactionsAsync(String dateFrom, String dateTo, String id, String mid, Integer pageOffset, Integer pageSize, String orderBy, String order, String searchText, String searchTerm, List<String> status, final ApiCallback<ResultDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPaymentLinkTransactionsValidateBeforeCall(dateFrom, dateTo, id, mid, pageOffset, pageSize, orderBy, order, searchText, searchTerm, status, _callback);
        Type localVarReturnType = new TypeToken<ResultDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSinglePaymentLink
     * @param id  (required)
     * @param mid merchant identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Something went wrong </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Details fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSinglePaymentLinkCall(String id, String mid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment-links/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mid != null) {
            localVarHeaderParams.put("mid", localVarApiClient.parameterToString(mid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSinglePaymentLinkValidateBeforeCall(String id, String mid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSinglePaymentLink(Async)");
        }
        
        // verify the required parameter 'mid' is set
        if (mid == null) {
            throw new ApiException("Missing the required parameter 'mid' when calling getSinglePaymentLink(Async)");
        }
        

        okhttp3.Call localVarCall = getSinglePaymentLinkCall(id, mid, _callback);
        return localVarCall;

    }

    /**
     * Get Single PaymentLink
     * 
     * @param id  (required)
     * @param mid merchant identifier (required)
     * @return ResultDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Something went wrong </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Details fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public ResultDTO getSinglePaymentLink(String id, String mid) throws ApiException {
        ApiResponse<ResultDTO> localVarResp = getSinglePaymentLinkWithHttpInfo(id, mid);
        return localVarResp.getData();
    }

    /**
     * Get Single PaymentLink
     * 
     * @param id  (required)
     * @param mid merchant identifier (required)
     * @return ApiResponse&lt;ResultDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Something went wrong </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Details fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultDTO> getSinglePaymentLinkWithHttpInfo(String id, String mid) throws ApiException {
        okhttp3.Call localVarCall = getSinglePaymentLinkValidateBeforeCall(id, mid, null);
        Type localVarReturnType = new TypeToken<ResultDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Single PaymentLink (asynchronously)
     * 
     * @param id  (required)
     * @param mid merchant identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Something went wrong </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> Details fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSinglePaymentLinkAsync(String id, String mid, final ApiCallback<ResultDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSinglePaymentLinkValidateBeforeCall(id, mid, _callback);
        Type localVarReturnType = new TypeToken<ResultDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendPaymentLink
     * @param channelList  (required)
     * @param id  (required)
     * @param mid merchant identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> something went wrong </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> PaymentLink Sent successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendPaymentLinkCall(List<String> channelList, String id, String mid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment-links/{id}/share"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (channelList != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "channelList", channelList));
        }

        if (mid != null) {
            localVarHeaderParams.put("mid", localVarApiClient.parameterToString(mid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendPaymentLinkValidateBeforeCall(List<String> channelList, String id, String mid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'channelList' is set
        if (channelList == null) {
            throw new ApiException("Missing the required parameter 'channelList' when calling sendPaymentLink(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sendPaymentLink(Async)");
        }
        
        // verify the required parameter 'mid' is set
        if (mid == null) {
            throw new ApiException("Missing the required parameter 'mid' when calling sendPaymentLink(Async)");
        }
        

        okhttp3.Call localVarCall = sendPaymentLinkCall(channelList, id, mid, _callback);
        return localVarCall;

    }

    /**
     * send PaymentLink
     * 
     * @param channelList  (required)
     * @param id  (required)
     * @param mid merchant identifier (required)
     * @return ResultDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> something went wrong </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> PaymentLink Sent successfully </td><td>  -  </td></tr>
     </table>
     */
    public ResultDTO sendPaymentLink(List<String> channelList, String id, String mid) throws ApiException {
        ApiResponse<ResultDTO> localVarResp = sendPaymentLinkWithHttpInfo(channelList, id, mid);
        return localVarResp.getData();
    }

    /**
     * send PaymentLink
     * 
     * @param channelList  (required)
     * @param id  (required)
     * @param mid merchant identifier (required)
     * @return ApiResponse&lt;ResultDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> something went wrong </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> PaymentLink Sent successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultDTO> sendPaymentLinkWithHttpInfo(List<String> channelList, String id, String mid) throws ApiException {
        okhttp3.Call localVarCall = sendPaymentLinkValidateBeforeCall(channelList, id, mid, null);
        Type localVarReturnType = new TypeToken<ResultDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * send PaymentLink (asynchronously)
     * 
     * @param channelList  (required)
     * @param id  (required)
     * @param mid merchant identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> something went wrong </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> PaymentLink Sent successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendPaymentLinkAsync(List<String> channelList, String id, String mid, final ApiCallback<ResultDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendPaymentLinkValidateBeforeCall(channelList, id, mid, _callback);
        Type localVarReturnType = new TypeToken<ResultDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for summary
     * @param mid merchant identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Something went wrong </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> summary fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call summaryCall(String mid, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payment-links/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mid != null) {
            localVarHeaderParams.put("mid", localVarApiClient.parameterToString(mid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "OAuth2" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call summaryValidateBeforeCall(String mid, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'mid' is set
        if (mid == null) {
            throw new ApiException("Missing the required parameter 'mid' when calling summary(Async)");
        }
        

        okhttp3.Call localVarCall = summaryCall(mid, _callback);
        return localVarCall;

    }

    /**
     * Details of paymentlinks
     * 
     * @param mid merchant identifier (required)
     * @return ResultDTO
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Something went wrong </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> summary fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public ResultDTO summary(String mid) throws ApiException {
        ApiResponse<ResultDTO> localVarResp = summaryWithHttpInfo(mid);
        return localVarResp.getData();
    }

    /**
     * Details of paymentlinks
     * 
     * @param mid merchant identifier (required)
     * @return ApiResponse&lt;ResultDTO&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Something went wrong </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> summary fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResultDTO> summaryWithHttpInfo(String mid) throws ApiException {
        okhttp3.Call localVarCall = summaryValidateBeforeCall(mid, null);
        Type localVarReturnType = new TypeToken<ResultDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Details of paymentlinks (asynchronously)
     * 
     * @param mid merchant identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 400 </td><td> Something went wrong </td><td>  -  </td></tr>
        <tr><td> 200 </td><td> summary fetched successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call summaryAsync(String mid, final ApiCallback<ResultDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = summaryValidateBeforeCall(mid, _callback);
        Type localVarReturnType = new TypeToken<ResultDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
